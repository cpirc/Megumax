#include "eval.h"

namespace megumax {

constexpr int piece_values[] = {100, 300, 325, 500, 900, 100000};
// clang-format off
constexpr int pst[6][64] = {
    {
        0,  0,  0,  0,  0,  0,  0,  0,
       -1, -7,-11,-35,-13,  5,  3, -5,
        1,  1, -6,-19, -6, -7, -4, 10,
        1, 14,  8,  4,  5,  4, 10,  7,
        9, 30, 23, 31, 31, 23, 17, 11,
       21, 54, 72, 56, 77, 95, 71, 11,
      118,121,173,168,107, 82,-16, 22,
        0,  0,  0,  0,  0,  0,  0,  0,
    },{
      -99,-30,-66,-64,-29,-19,-61,-81,
      -56,-31,-28, -1, -7,-20,-42,-11,
      -38,-16,  0, 14,  8,  3,  3,-42,
      -14,  0,  2,  3, 19, 12, 33, -7,
      -14, -4, 25, 33, 10, 33, 14, 43,
      -22, 18, 60, 64,124,143, 55,  6,
      -34, 24, 54, 74, 60,122,  2, 29,
      -60,  0,  0,  0,  0,  0,  0,  0,
    },{
       -7, 12, -8,-37,-31, -8,-45,-67,
       15,  5, 13,-10,  1,  2,  0, 15,
        5, 12, 14, 13, 10, -1,  3,  4,
        1,  5, 23, 32, 21,  8, 17,  4,
       -1, 16, 29, 27, 37, 27, 17,  4,
        7, 27, 20, 56, 91,108, 53, 44,
      -24,-23, 30, 58, 65, 61, 69, 11,
        0,  0,  0,  0,  0,  0,  0,  0,
    },{
       -2, -1,  3,  1,  2,  1,  4, -8,
      -26, -6,  2, -2,  2,-10, -1,-29,
      -16,  0,  3, -3,  8, -1, 12,  3,
       -9, -5,  8, 14, 18,-17, 13,-13,
       19, 33, 46, 57, 53, 39, 53, 16,
       24, 83, 54, 75,134,144, 85, 75,
       46, 33, 64, 62, 91, 89, 70,104,
       84,  0,  0, 37,124,  0,  0,153,
    },{
        1,-10,-11,  3,-15,-51,-83,-13,
       -7,  3,  2,  5, -1,-10, -7, -2,
      -11,  0, 12,  2,  8, 11,  7, -6,
       -9,  5,  7,  9, 18, 17, 26,  4,
       -6,  0, 15, 25, 32,  9, 26, 12,
      -16, 10, 13, 25, 37, 30, 15, 26,
        1, 11, 35,  0, 16, 55, 39, 57,
      -13,  6,-42,  0, 29,  0,  0,102,
    },{
        0,  0,  0, -9,  0, -9, 25,  0,
       -9, -9, -9, -9, -9, -9, -9, -9,
       -9, -9, -9, -9, -9, -9, -9, -9,
       -9, -9, -9, -9, -9, -9, -9, -9,
       -9, -9, -9, -9, -9, -9, -9, -9,
       -9, -9, -9, -9, -9, -9, -9, -9,
       -9, -9, -9, -9, -9, -9, -9, -9,
       -9, -9, -9, -9, -9, -9, -9, -9,
    },
};
// clang-format on

int eval(const libchess::Position& pos) {
    int score = 0;
    auto occupancy = pos.occupancy_bb();

    while (occupancy) {
        const auto sq = occupancy.forward_bitscan();
        occupancy.forward_popbit();

        const auto piece = pos.piece_on(sq);
        const auto colour = piece->color();
        const int mul = colour == libchess::constants::WHITE ? 1 : -1;

        // Material
        score += piece_values[piece.value().type()] * mul;

        // PST
        if (colour == libchess::constants::WHITE) {
            score += pst[piece.value().type()][sq];
        } else {
            score -= pst[piece.value().type()][sq ^ 56];
        }
    }

    // Return from side to move's pov
    if (pos.side_to_move() != libchess::constants::WHITE) {
        score = -score;
    }

    return score;
}

}  // namespace megumax
